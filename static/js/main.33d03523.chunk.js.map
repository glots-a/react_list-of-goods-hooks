{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReversed","NONE","sortType","setSortType","currentGoods","goods","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA5CD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKP,EAASY,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MACF,KAAKf,EAASiB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAS7C,OAJId,GACFO,EAAaQ,UAGRR,EAwBcS,CACnBnB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBACpB,CAAE,WAAYhB,IAAaP,EAASY,WACtCY,QAzBqB,WAC3BhB,EAAYR,EAASY,WAoBjB,iCASA,wBACEU,KAAK,SACLD,UAAWE,IAAW,oBACpB,CAAE,WAAYhB,IAAaP,EAASiB,SACtCO,QA9BiB,WACvBhB,EAAYR,EAASiB,SAyBjB,4BASA,wBACEK,KAAK,SACLD,UAAWE,IAAW,mBACpB,CAAE,aAAcnB,IAClBoB,QA/Cc,WACpBnB,GAAaD,IA0CT,sBAQEG,IAAaP,EAASM,MAAQF,IAC9B,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QA3CU,WAClBnB,GAAY,GACZG,EAAYR,EAASM,OAsCf,sBAUJ,6BACE,6BAEIG,EAAagB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCvHtCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.33d03523.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport classNames from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default: visibleGoods; //eslint-disable-line\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleReverse = () => {\n    setReversed(!isReversed);\n  };\n\n  const handleAlphabeticSort = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReset = () => {\n    setReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const currentGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET })}\n          onClick={handleAlphabeticSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning',\n            { 'is-light': sortType !== SortType.LENGTH })}\n          onClick={handleLengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-danger',\n            { ' is-light': !isReversed })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {\n            currentGoods.map(good => (\n              <li data-cy=\"Good\" key={good}>\n                {good}\n              </li>\n            ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}